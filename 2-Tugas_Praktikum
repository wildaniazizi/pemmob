//soal1
void main() {
  for (int i = 18; i >= 9; i--) {
    print('Nama saya adalah Fulan, sekarang berumur ${i}');
  }
}

//soal2
//Mengapa sangat penting untuk memahami bahasa pemrograman Dart sebelum kita menggunakan framework Flutter ? Jelaskan!
Menguasai bahasa pemrograman Dart sebelum menggunakan Flutter sangat penting karena:
a. Fondasi Flutter: Flutter sepenuhnya dibangun dengan Dart. Memahami Dart berarti memiliki dasar yang kuat untuk menggunakan Flutter secara efektif.
b. Sintaks dan Struktur Dart: Dart memiliki aturan penulisan kode yang berbeda dari bahasa pemrograman lainnya. Dengan memahami Dart, Anda akan lebih mudah menulis dan memahami kode dalam Flutter.
c. Pemrograman Asinkron: Banyak fungsi di Flutter menggunakan pemrograman asinkron. Dengan menguasai Dart, Anda dapat menangani operasi asinkron ini dengan lebih baik, yang penting untuk kinerja aplikasi.
d. Optimasi Kode: Memahami Dart memungkinkan Anda untuk menulis kode yang lebih efisien dan optimal, sehingga aplikasi Anda dapat berjalan dengan lebih lancar.
e. Kemampuan Debugging: Ketika terjadi error, pengetahuan Dart membantu Anda lebih mudah menemukan dan memperbaiki masalah dalam aplikasi.
Secara keseluruhan, penguasaan Dart adalah kunci untuk memaksimalkan potensi Flutter dalam pengembangan aplikasi.

//soal3
1. Memahami Dart Sebagai Dasar Flutter:
    a. Dart adalah bahasa inti di balik Flutter; penguasaan Dart sangat penting untuk pengembangan aplikasi yang efektif dengan Flutter.
    b. Dart dirancang sebagai bahasa modern yang mendukung fitur-fitur terkini seperti garbage collection, type annotations opsional, dan eksekusi lintas platform.
2. Evolusi dan Peran Dart:
      a. Dart awalnya difokuskan untuk pengembangan web dan kemudian beralih ke pengembangan mobile dengan Flutter, menawarkan performa tinggi dan stabilitas.
      b. Bahasa ini memiliki alat bantu yang canggih, seperti IDE plugins dan ekosistem paket yang besar, yang mendukung proyek skala besar.
3. Eksekusi Kode Dart:
      a. Dart dapat dikompilasi menggunakan metode Just-In-Time (JIT) untuk pengembangan cepat dan Ahead-Of-Time (AOT) untuk performa aplikasi yang optimal.
      b. Fitur hot reload yang didukung Dart melalui JIT membantu pengembang mendapatkan umpan balik instan saat melakukan perubahan kode.
4. Pemrograman Berorientasi Objek (OOP):
      a. Dart mendukung prinsip-prinsip OOP seperti enkapsulasi, inheritance, polimorfisme, dan komposisi, yang memungkinkan pengembangan aplikasi yang terstruktur dan mudah dikelola.
5. Sintaks dan Struktur Dart:
      a. Memahami tipe data, operator, kontrol alur, dan fungsi dalam Dart adalah fundamental untuk menulis kode yang efisien dan terstruktur dalam Flutter.
      b. Dart juga memungkinkan operator overriding, yang memberikan fleksibilitas lebih dalam pengembangan.
6. DartPad sebagai Alat Belajar:
      a. DartPad adalah alat online yang dapat digunakan untuk bereksperimen dengan fitur-fitur bahasa Dart tanpa perlu setup lokal yang rumit.
      b. Ini mendukung pustaka inti Dart dan sangat berguna untuk memulai belajar Dart atau menguji konsep dengan cepat.
7. Kakas Produktivitas Dart:
      a. Dart menyediakan alat produktif untuk analisis kode, manajemen paket, dan integrasi dengan IDE, yang semuanya mendukung efisiensi pengembangan.
8. Kompilasi ke JavaScript dan Native:
      a. Dart dapat dikompilasi menjadi JavaScript untuk aplikasi web atau dikompilasi secara native untuk aplikasi mobile, memberikan fleksibilitas dalam pengembangan lintas platform.
